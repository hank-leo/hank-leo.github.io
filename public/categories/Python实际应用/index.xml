<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python实际应用 on Hank's Blog</title><link>https://hank-leo.github.io/categories/Python%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/</link><description>Recent content in Python实际应用 on Hank's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 11 Dec 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://hank-leo.github.io/categories/Python%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>Python练习</title><link>https://hank-leo.github.io/post/python/python%E7%BB%83%E4%B9%A0/</link><pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate><guid>https://hank-leo.github.io/post/python/python%E7%BB%83%E4%B9%A0/</guid><description>实例001：数字组合 题目： 有四个数字：1、2、3、4，能组成多少个互不相同且无重复数字的三位数？各是多少？ 程序分析： 遍历全部可能，把有重复的剃掉。 total=0 for i in range(1,5): for j in range(1,5): for k in range(1,5): if ((i!=j)and(j!=k)and(k!=i)): print(i,j,k) total+=1 print(total) 简便方法： 用itertools中的permutations即可。 import itertools sum2=0 a=[1,2,3,4] for i in itertools.permutations(a,3): print(i) sum2+=1 print(sum2) 实例002：</description></item><item><title>Xpath的实际应用</title><link>https://hank-leo.github.io/post/python/xpath%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/</link><pubDate>Thu, 05 Dec 2019 00:00:00 +0000</pubDate><guid>https://hank-leo.github.io/post/python/xpath%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/</guid><description>xpath中使用contains xpath(span[contanins(@class, 'xxx')]) Xpath如何选择不包含某一个属性的节点? 这里可以用到 not 例如排除一个属性的节点可以使用 //tbody/tr[not(@class)] 排除一个或者两个属性可以使用 //tbody/tr[not(@class or @id)] xpath按序选择 有时候我们在选择的时候可能某些属性同时匹配了多个节点，但是我们只想要其中的某个节点，如第二个节点，或者最</description></item><item><title>列表的实际应用</title><link>https://hank-leo.github.io/post/python/%E5%88%97%E8%A1%A8%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/</link><pubDate>Thu, 05 Dec 2019 00:00:00 +0000</pubDate><guid>https://hank-leo.github.io/post/python/%E5%88%97%E8%A1%A8%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/</guid><description>列表合并保留最大长度 import itertools w, x, y, z = [], [1], [2, 3], [4, 5, 6] longest_wxyz = itertools.zip_longest(w, x, y, z) print(list(longest_wxyz)) 结果: [(None, 1, 2, 4), (None, None, 3, 5), (None, None, None, 6)] 列表元素替换 lst = ['1','2','3'] rep = ['4' if x == '2' else x for x in lst] print(rep) 结果: [&amp;lsquo;1&amp;rsquo;, &amp;lsquo;4&amp;rsquo;, &amp;lsquo;3&amp;rsquo;] 列表进行去重操作 一般的去重操作后是出现乱序的情况 t=['8','7','2','中国','China','中国','1','4']</description></item><item><title>字典的实际应用</title><link>https://hank-leo.github.io/post/python/%E5%AD%97%E5%85%B8%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/</link><pubDate>Thu, 05 Dec 2019 00:00:00 +0000</pubDate><guid>https://hank-leo.github.io/post/python/%E5%AD%97%E5%85%B8%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/</guid><description>1.字典排序 利用key排序 d = {'d1':2, 'd2':4, 'd4':1,'d3':3,} for k in sorted(d): print(k,d[k]) d1 2 d2 4 d3 3 d4 1 利用value排序：getitem d = {'d1':2, 'd2':4, 'd4':1,'d3':3,} for k in sorted(d,key=d.__getitem__): print(k,d[k]) d4 1 d1 2 d3 3 d2 4 反序: reverse=True d = {'d1':2, 'd2':4, 'd4':1,'d3':3,} for k in sorted(d,key=d.__getitem__,reverse=True): print(k,d[k]) d2 4 d3 3 d1 2 d4 1 对dict_items进行排序 d = {'d1':2, 'd2':4, 'd4':1,'d3':3,} res = sorted(d.items(),key=lambda d:d[1],reverse=True) print(res) [(&amp;lsquo;d2&amp;rsquo;, 4), (&amp;lsquo;d3&amp;rsquo;, 3), (&amp;lsquo;d1&amp;rsquo;, 2), (&amp;lsquo;d4&amp;rsquo;, 1)] 2.两个字典（dict）合并 dict1 = { &amp;quot;name&amp;quot;:&amp;quot;owen&amp;quot;, &amp;quot;age&amp;quot;:</description></item><item><title>字符串的实际应用</title><link>https://hank-leo.github.io/post/python/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/</link><pubDate>Thu, 05 Dec 2019 00:00:00 +0000</pubDate><guid>https://hank-leo.github.io/post/python/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/</guid><description>1.判断字符串是否为小数 try: lat = float(location.split(',')[1]) lon = float(location.split(',')[0]) except ValueError: print('no number') 2.用split对字符串进行分割 str='storeId=ff8080816277aa0a0162845d48e3012b&amp;amp;appid=wxe37b2e703155ed41&amp;amp;transId=wxe37b2e703155ed412019-05-09%2010%3A28%3A15&amp;amp;sign=dc8fac903b03556247659e1b548bccce&amp;amp;timestamp=2019-05-09%2010%3A28%3A15&amp;amp;memberId=ff8080816a889e71016a9a68a6c55a37&amp;amp;cliqueId=-1&amp;amp;cliqueMemberId=-1&amp;amp;useClique=0&amp;amp;enterpriseId=ff808081624e60f601625c50a30900ce&amp;amp;unionid=oLWn80pR0DtSJXfnO_1O4ZOzfvAE&amp;amp;openid=oZe8D5gmPcPANw4kNNcG8mlAW1mI&amp;amp;launchOptions=%7B%22path%22%3A%22%2Fpages%2Fmall%2Fmall-index%2Fmall-index%22%2C%22query%22%3A%7B%7D%2C%22scene%22%3A1102%2C%22referrerInfo%22%3A%7B%22appId%22%3A%22wx97e5123eb6041454%22%7D%7D' str2=str.split('&amp;amp;') for i in str2: print('&amp;quot;'+i.split('=')[0]+'&amp;quot;:&amp;quot;'+i.split('=')[1]+'&amp;quot;,') 结果如下： &amp;ldquo;storeId&amp;rdquo;:&amp;ldquo;ff8080816277aa0a0162845d48e3012b&amp;rdquo;, &amp;ldquo;appid&amp;rdquo;:&amp;ldquo;wxe37b2e703155ed41&amp;rdquo;, &amp;ldquo;transId&amp;rdquo;:&amp;ldquo;wxe37b2e703155ed412019-05-09%2010%3A28%3A15&amp;rdquo;, &amp;ldquo;sign&amp;rdquo;:&amp;ldquo;dc8fac903b03556247659e1b548bccce&amp;rdquo;, &amp;ldquo;timestamp&amp;rdquo;:&amp;ldquo;2019-05-09%2010%3A28%3A15&amp;rdquo;, &amp;ldquo;memberId&amp;rdquo;:&amp;ldquo;ff8080816a889e71016a9a68a6c55a37&amp;rdquo;, &amp;ldquo;cliqueId&amp;rdquo;:&amp;quot;-1&amp;rdquo;, &amp;ldquo;cliqueMemberId&amp;rdquo;:&amp;quot;-1&amp;rdquo;, &amp;ldquo;useClique&amp;rdquo;:&amp;ldquo;0&amp;rdquo;, &amp;ldquo;enterpriseId&amp;rdquo;:&amp;ldquo;ff808081624e60f601625c50a30900ce&amp;rdquo;, &amp;ldquo;unionid&amp;rdquo;:&amp;ldquo;oLWn80pR0DtSJXfnO_1O4ZOzfvAE&amp;rdquo;, &amp;ldquo;openid&amp;rdquo;:&amp;ldquo;oZe8D5gmPcPANw4kNNcG8mlAW1mI&amp;rdquo;, &amp;ldquo;launchOptions&amp;rdquo;:&amp;quot;%7B%22path%22%3A%22%2Fpages%2Fmall%2Fmall-index%2Fmall-index%22%2C%22query%22%3A%7B%7D%2C%22scene%22%3A1102%2C%22referrerInfo%22%3A%7B%22appId%22%3A%22wx97e5123eb6041454%22%7D%7D&amp;rdquo;, 3.python检测字符串乱码 import chardet f=open('test.txt','rb') f_read=f.read() f_charInfo=chardet.detect(f_read) print(f_charInfo) # f_charInfo的输出是这样的的一个字典{'confidence': 0.99, 'encoding': 'utf-8'} 4.将逗号分隔的字符串转换为P</description></item><item><title>正则的实际应用</title><link>https://hank-leo.github.io/post/python/%E6%AD%A3%E5%88%99%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/</link><pubDate>Thu, 05 Dec 2019 00:00:00 +0000</pubDate><guid>https://hank-leo.github.io/post/python/%E6%AD%A3%E5%88%99%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/</guid><description>grep hank@hank:~$ cat grep.txt ooxx121212121ooxx ooxx 12121212 oox 12121212 1212 ooxx 1212 oo3xx oo4xx ooWxx oomxx $ooxx oo1234xx ooxyzxx hank@hank:~$ grep &amp;quot;ooxx&amp;quot; grep.txt ooxx121212121ooxx ooxx 12121212 1212 ooxx 1212 $ooxx hank@hank:~$ grep &amp;quot;[34]&amp;quot; grep.txt oo3xx oo4xx oo1234xx hank@hank:~$ grep &amp;quot;[0-9]\{4\}&amp;quot; grep.txt ooxx121212121ooxx ooxx 12121212 oox 12121212 1212 ooxx 1212 oo1234xx hank@hank:~$ grep -E &amp;quot;[0-9]{4}&amp;quot; grep.txt ooxx121212121ooxx ooxx 12121212 oox 12121212 1212 ooxx 1212 oo1234xx hank@hank:~$ grep &amp;quot;\&amp;lt;ooxx\&amp;gt;&amp;quot; grep.txt ooxx 12121212 1212 ooxx 1212 $ooxx hank@hank:~$ grep &amp;quot;[^0-9][0-9]\{4\}[^0-9]&amp;quot; grep.txt oo1234xx hank@hank:~$ grep &amp;quot;\(^[0-9]\|[^0-9][0-9]\)[0-9]\{2\}\([0-9]$\|[0-9][^0-9]\)&amp;quot; grep.txt 1212 ooxx 1212 oo1234xx hank@hank:~$ grep -E &amp;quot;(^[0-9]|[^0-9][0-9])[0-9]{2}([0-9]$|[0-9][^0-9])&amp;quot; grep.txt 1212 ooxx 1212 oo1234xx</description></item></channel></rss>